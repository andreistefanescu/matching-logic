kmod DLIST-HP is
  including MATCHC-SEMANTICS + MATHEMATICAL-SEQUENCE-BUILTIN-MODULE

  kvar N : Nat
  kvar ELEFT LEFT RIGHT ERIGHT P Q P' Q' : Int++
  KVARS
  kvar I : Int++
  kvar Alpha Beta : Seq++
  kvar H : Map
  kvar K : K
  kvar Phi : Formula
  kvar NtPhi : NtFormula
  kvar CfgItems TaskItems : Bag


*** Definition of Lists ***
  rule
    <task>
      <taskType> Run </taskType>
      <config>
        <k> derive(P') ~> K </k>
        <heap> hpnameseg(ELEFT,LEFT)(RIGHT,ERIGHT,Alpha) H </heap>
        <counter> N </counter>
        CfgItems
      </config>
      <form> Phi </form>
      TaskItems
    </task>
  =>
    <task>
      <taskType> Run </taskType>
      <config>
        <k> derive(P') ~> K </k>
        <heap> H </heap> 
        <counter> N </counter>
        CfgItems
      </config>
      <form> Phi /\ (ELEFT === LEFT) /\ (RIGHT === ERIGHT) /\ (Alpha === epsilon) </form>
      TaskItems
    </task>
    <task>
      <taskType> Run </taskType>
      <config >
        <k> K </k>
        <heap>
          LUNROLL
  [structural]

    rule
    <task>
      <taskType> Run </taskType>
      <config>
        <k> derive(Q') ~> K </k>
        <heap> hpnameseg(ELEFT,LEFT)(RIGHT,ERIGHT,Alpha) H </heap>
        <counter> N </counter>
        CfgItems
      </config>
      <form> Phi </form>
      TaskItems
    </task>
  =>
    <task>
      <taskType> Run </taskType>
      <config>
        <k> derive(Q') ~> K </k>
        <heap> H </heap> 
        <counter> N </counter>
        CfgItems
      </config>
      <form> Phi /\ (ELEFT === LEFT) /\ (ERIGHT === LEFT) /\ (Alpha === epsilon) </form>
      TaskItems
    </task>
    <task>
      <taskType> Run </taskType>
      <config >
        <k> K </k>
        <heap>
          RUNROLL
  [structural]

  rule
    <heap_> hpnameseg(ELEFT,0)(0,ERIGHT,Alpha) => .Map <_/heap>
    <form> Phi => Phi /\ (ELEFT === 0) /\ (ERIGHT === 0) /\ Alpha === epsilon </form>
  [structural]
    rule
    <heap_> hpnameseg(LEFT,LEFT)(RIGHT,ERIGHT,Alpha) => .Map <_/heap>
    <form> Phi => Phi /\ (RIGHT === ERIGHT) /\ Alpha === epsilon </form>
  [structural]
  rule
    <heap_> hpnameseg(ELEFT,LEFT)(RIGHT,RIGHT,Alpha) => .Map <_/heap>
    <form> Phi => Phi /\ (ELEFT === LEFT) /\ Alpha === epsilon </form>
  [structural]

  rule
    <heap_> hpnameseg(ELEFT,LEFT)(RIGHT,ERIGHT,epsilon) => .Map <_/heap>
    <form> Phi => Phi /\ (LEFT === 0) /\ (RIGHT === 0) </form>
  [structural]

  rule
    <taskType> Hypothesis </taskType>
    <heap_>
        SROLL
    <_/heap>
  rule
    <taskType> Hypothesis </taskType>
    <heap_>
        hpnameseg(P,Q')(P',P1,Alpha)
        hpnameseg(P',Q)(Q1,Q',Beta)
      =>     
        hpnameseg(P,Q)(Q1,P1, Alpha @ Beta)
    <_/heap>
     
  rule
    <heap_>
        dlinkedlist(P,Q)(Alpha)
      =>
        hpnameseg(0,P)(Q,0,Alpha)
    <_/heap>
  [structural]
  

  rule
        <heap> dlist(P')(Alpha) H </heap>
  =>
        <heap> dlinkedlist(P',P')(Alpha) H </heap> 
  [structural]
endkm
