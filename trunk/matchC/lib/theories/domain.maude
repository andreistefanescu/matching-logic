***(
    This file is part of the Matching Logic Verification Framework

    Copyright (C) 2009-2011 Grigore Rosu

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
***)


mod MATHEMATICAL-DOMAIN-BUILTIN-MODULE is
  inc MATHEMATICAL-SEQUENCE-BUILTIN-MODULE
    + MATHEMATICAL-MULTISET-BUILTIN-MODULE
    + MATHEMATICAL-TREE-BUILTIN-MODULE .

  vars Phi Phi1 Phi2 : Formula .
  var Obj Obj1 Obj2 : MathObj++ .
  var I J : Int++ .
  var A A1 A2 : Seq++ .
  var NeA NeA1 NeA2 : NeSeq++ .
  var M M1 M2 : MSet++ .
  var T TL TR : Tree++ .


  op tree2list : Tree++ -> NeSeq++ .
  eq tree2list(TL [ Obj ] TR) = tree2list(TL) @ [Obj] @ tree2list(TR) .
  eq tree2list(upsilon) = epsilon .

  op tree2mset : Tree++ -> NeMSet++ .
  eq tree2mset(TL [ Obj ] TR) = tree2mset(TL) U {| Obj |} U tree2mset(TR) .
  eq tree2mset(upsilon) = empty .

  op isBst : Tree++ -> AtomFormula .
  eq isBst(TL [I] TR)
   = leq(tree2mset(TL), {| I |}) /\ leq({| I |}, tree2mset(TR))
     /\ isBst(TL) /\ isBst(TR) .
  eq isBst(upsilon) = TrueFormula .

  op isAvl : Tree++ -> AtomFormula .
  eq isAvl(TL [[I] @ [J]] TR)
   = leq(tree2mset(st(TL)), {| I |}) /\ leq({| I |}, tree2mset(st(TR)))
     /\ J === height(TL [[I] @ [J]] TR)
     /\ @(-1 <=Int (height(TL) -Int height(TR)))
     /\ @((height(TL) -Int height(TR)) <=Int 1)
     /\ isAvl(TL) /\ isAvl(TR) .
  eq isAvl(upsilon) = TrueFormula .

  op seq2mset : Seq++ -> NeMSet++ .
  eq seq2mset(NeA1 @ NeA2) = seq2mset(NeA1) U seq2mset(NeA2) .
  eq seq2mset([Obj]) = {| Obj |} .
  eq seq2mset(epsilon) = empty .

  eq seq2mset(A) === empty = A === epsilon .


 ceq A1 @ [Obj] @ A2 === A /\ Phi1 ===> {| Obj |} U M1 === M /\ Phi2
   = A1 @ [Obj] @ A2 === A /\ seq2mset(A1 @ [Obj] @ A2) === seq2mset(A) /\ Phi1
     ===> {| Obj |} U M1 === M /\ Phi2
  if (A1 @ [Obj] @ A2 === A /\ seq2mset(A1 @ [Obj] @ A2) === seq2mset(A)
     /\ Phi1)
     =/=Bool
     (A1 @ [Obj] @ A2 === A /\ Phi1) .
 ceq A1 @ NeA @ A2 === A /\ Phi1 ===> seq2mset(NeA) U M1 === M /\ Phi2
   = A1 @ NeA @ A2 === A /\ seq2mset(A1 @ NeA @ A2) === seq2mset(A) /\ Phi1
     ===> seq2mset(NeA) U M1 === M /\ Phi2
  if (A1 @ NeA @ A2 === A /\ seq2mset(A1 @ NeA @ A2) === seq2mset(A)
     /\ Phi1)
     =/=Bool
     (A1 @ NeA @ A2 === A /\ Phi1) .


  op isSorted : Seq++ -> AtomFormula .
  eq isSorted(NeA1 @ NeA2)
   = leq(seq2mset(NeA1), seq2mset(NeA2))
     /\ isSorted(NeA1) /\ isSorted(NeA2) .
  eq isSorted([I]) = TrueFormula .
  eq isSorted(epsilon) = TrueFormula .

 ceq [Obj1] @ A1 === A2 /\ leq({| Obj1 |}, seq2mset(A1)) /\ isSorted(A1) /\ Phi1
     ===> Phi2
   = [Obj1] @ A1 === A2 /\ leq({| Obj1 |}, seq2mset(A1)) /\ isSorted(A1)
     /\ isSorted(A2) /\ Phi1
     ===> Phi2
  if ([Obj1] @ A1 === A2 /\ leq({| Obj1 |}, seq2mset(A1)) /\ isSorted(A1)
     /\ isSorted(A2) /\ Phi1)
     =/=Bool
     ([Obj1] @ A1 === A2 /\ leq({| Obj1 |}, seq2mset(A1)) /\ isSorted(A1)
     /\ Phi1) .

  eq @(1 +Int (-Int len(A)) >=Int 0) /\ Phi1 ===> isSorted(A) /\ Phi2
   = @(1 +Int (-Int len(A)) >=Int 0) /\ isSorted(A) /\ Phi1 ===> Phi2 .

  op treeList2list : Seq++ -> Seq++ .
  eq treeList2list(A1 @ [T] @ A2)
   = treeList2list(A1) @ tree2list(T) @ treeList2list(A2) .
  eq treeList2list(epsilon) = epsilon .


  eq (A === epsilon \/ len(A) === 1)
     /\ seq2mset(A) === {| Obj1 |} U {| Obj2 |} U M
   = FalseFormula .
 ceq len(A) +Int I === J = FalseFormula
  if -Int J +Int I >Int 0 .  
endm

