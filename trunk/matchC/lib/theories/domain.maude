***(
    This file is part of the Matching Logic Verification Framework

    Copyright (C) 2009-2011 Grigore Rosu

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
***)


mod MATHEMATICAL-DOMAIN-BUILTIN-MODULE is
  inc MATHEMATICAL-SEQUENCE-BUILTIN-MODULE
    + MATHEMATICAL-MULTISET-BUILTIN-MODULE
    + MATHEMATICAL-TREE-BUILTIN-MODULE .

  var Obj : MathObj++ .
  var I J : Int++ .
  vars T TL TR : Tree++ .

  op tree2list : Tree++ -> NeSeq++ .
***(
  op tree2list : PETree -> PESeq [ditto] .
  op tree2list : FETree -> FESeq [ditto] .
  op tree2list : FreeTree -> FreeSeq [ditto] .
  op tree2list : Tree -> NeSeq [ditto] .
***)
  eq tree2list(TL [ Obj ] TR) = tree2list(TL) @ [Obj] @ tree2list(TR) .
  eq tree2list(upsilon) = epsilon .
  op tree2mset : Tree++ -> NeMSet++ .
***(
  op tree2mset : PETree -> PEMSet [ditto] .
  op tree2mset : FETree -> FEMSet [ditto] .
  op tree2mset : FreeTree -> FreeMSet [ditto] .
  op tree2mset : Tree -> NeMSet [ditto] .
***)
  eq tree2mset(TL [ Obj ] TR) = tree2mset(TL) U {| Obj |} U tree2mset(TR) .
  eq tree2mset(upsilon) = empty .

  op isBst : Tree++ -> AtomFormula .
  eq isBst(TL [I] TR) = @(max(tree2mset(TL)) <=Int I) /\
                        @(I <=Int min(tree2mset(TR))) /\
                        isBst(TL) /\ isBst(TR) .
  eq isBst(upsilon) = TrueFormula .

  vars NeA NeA' : NeSeq++ .

  op isAvl : Tree++ -> AtomFormula .
  eq isAvl(TL [[I] @ [J]] TR)
    = leq(tree2mset(st(TL)), {| I |}) /\ leq({| I |}, tree2mset(st(TR)))
      /\ J === height(TL [[I] @ [J]] TR)
      /\ @(-1 <=Int (height(TL) -Int height(TR)))
      /\ @((height(TL) -Int height(TR)) <=Int 1)
      /\ isAvl(TL) /\ isAvl(TR) .
  eq isAvl(upsilon) = TrueFormula .

  op seq2mset : Seq++ -> NeMSet++ .
***(
  op seq2mset : PESeq -> PEMSet [ditto] .
  op seq2mset : FESeq -> FEMSet [ditto] .
  op seq2mset : FreeSeq -> FreeMSet [ditto] .
  op seq2mset : Seq -> NeMSet [ditto] .
***)
  eq seq2mset(NeA @ NeA') = seq2mset(NeA) U seq2mset(NeA') .
  eq seq2mset([Obj]) = {| Obj |} .
  eq seq2mset(epsilon) = empty .

  op isSorted : Seq++ -> AtomFormula .
  eq isSorted(NeA @ NeA')
   = @(min(seq2mset(NeA')) >=Int max(seq2mset(NeA))) /\
     isSorted(NeA) /\ isSorted(NeA') .
  eq isSorted([I]) = TrueFormula .
  eq isSorted(epsilon) = TrueFormula .

  vars Phi Phi1 Phi2 : Formula .
  var A A1 A2 : Seq++ .

  eq @(1 +Int (-Int len(A)) >=Int 0) /\ Phi1 ===> isSorted(A) /\ Phi2
   = @(1 +Int (-Int len(A)) >=Int 0) /\ Phi1 ===> Phi2 .

  op treeList2list : Seq++ -> Seq++ .
  eq treeList2list(A1 @ [T] @ A2)
   = treeList2list(A1) @ tree2list(T) @ treeList2list(A2) .
  eq treeList2list(epsilon) = epsilon .
endm

