***(
    This file is part of the Matching Logic Verification Framework

    Copyright (C) 2009-2011 Grigore Rosu

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
***)


mod MATHEMATICAL-INT-BUILTIN-MODULE is
  inc MATHEMATICAL-OBJECT-BUILTIN-MODULE + PL-INT .

--- define sorts, subsorts and skolem as below for each new mathematical object
  sorts PEInt FEInt FreeInt Int++ .   --- sort Int already defined
  subsort PEInt FEInt FreeInt Int < Int++ .
  subsort PEInt < PEMathObj .
  subsort FEInt < FEMathObj .
  subsort FreeInt < FreeMathObj .
  subsort Int < MathObj .
  subsort Int++ < MathObj++ .

  op ?Int : Nat -> PEInt .
  op !Int : Nat -> FEInt .
  op FreeInt : Nat -> FreeInt .
  op skolem : Nat PEInt -> FreeInt [ditto] .
  op co-skolem : Nat FreeInt -> FEInt [ditto] .

--- define operations to be used symbolically, as well as desired properties
  ops _+Int_ _-Int_ _*Int_ _/Int_ _%Int_ : Int++ Int++ -> Int++ [ditto] .
  ops _<=Int_ _<Int_ _>=Int_ _>Int_ : Int++ Int++ -> Bool [ditto] .
  ops _<<Int_ _>>Int_ : Int++ Int++ -> Int++ [ditto] .
  ops -Int_ ~Int_ : Int++ -> Int++ [ditto] .
  ops minInt maxInt : Int++ Int++ -> Int++ [ditto] .
  op _==Int_ : Int++ Int++ -> Bool [ditto] .


  op bool2int : Bool -> Int++ .
  eq bool2int(true) = 1 .
  eq bool2int(false) = 0 .


  var B : Bool .
  var I J K I1 I2 J1 J2 N : Int++ .
  var NzI : NzInt . 
  var Phi Phi1 Phi2 : Formula .
  var NtPhi : NtFormula .


  eq @(I ==Int J) = I === J .
  eq (I:Int === J:Int) = @(I:Int ==Bool J:Int) .


  eq 0 +Int I = I .
  eq I +Int (-Int I) = 0 .
  eq -Int (-Int I) = I .
  eq -Int (I +Int J) = (-Int I) +Int (-Int J) .
  eq I -Int J = I +Int (-Int J) .
  eq 1 *Int I = I .
  eq I *Int (I1 +Int I2) = (I *Int I1) +Int (I *Int I2) .
  eq (-Int I) *Int J = -Int (I *Int J) .

  eq (-Int I) +Int J === 0 = I === J .
  eq -Int I === 0 = I === 0 .
  eq I === I +Int J = J === 0 .
  eq I +Int K === J +Int K = I === J .
  eq I +Int J:Int === K:Int = I === -Int J:Int +Int K:Int .

 ceq I1 === J1 /\ Phi1 ===> I2 === J2 /\ Phi2
   = I1 === J1 /\ I2 === J2 /\ Phi1 ===> Phi2
  if (-Int I1) +Int (-Int I2) +Int J1 +Int J2 ==Bool 0 .
 ceq I1 === J1 /\ ~(I2 === J2) = FalseFormula
  if (-Int I1) +Int (-Int I2) +Int J1 +Int J2 ==Bool 0 .


  eq I <Int J = J >Int I .
  eq I <=Int J = J >=Int I .
  eq @(I >Int J) = @(I >=Int J) /\ ~(I === J) . 
 ceq I >=Int J = I +Int (-Int J) >=Int 0 if J =/=Bool 0 .

  eq ~(@(I >=Int 0)) = @(I <Int 0) .
  eq (@(-Int I +Int J >=Int 0) /\ ~(I === J) \/ I === J) 
   = @(-Int I +Int J >=Int 0) .
 ceq @(I >=Int 0) /\ @(J >=Int 0) = (I === 0) if I +Int J ==Bool 0 .

  *** partial transitive closure
 ceq norm(@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(I === J)
          /\ Phi)
   = norm(@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(I === J)
          /\ @(-Int K +Int I >=Int 0) /\ ~(I === K) /\ Phi)
  if (@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(I === J)
     /\ @(-Int K +Int I >=Int 0) /\ ~(I === K) /\ Phi)
     =/=Bool 
     (@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(I === J)
     /\ Phi) .
 ceq norm(@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(J === K)
          /\ Phi)
   = norm(@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(J === K)
          /\ @(-Int K +Int I >=Int 0) /\ ~(I === K) /\ Phi)
  if (@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(J === K)
     /\ @(-Int K +Int I >=Int 0) /\ ~(I === K) /\ Phi)
     =/=Bool 
     (@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ ~(J === K)
     /\ Phi) .
 ceq norm(@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ Phi)
   = norm(@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0)
          /\ @(-Int K +Int I >=Int 0) /\ Phi)
  if (@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0)
     /\ @(-Int K +Int I >=Int 0) /\ Phi)
     =/=Bool 
     (@(-Int J +Int I >=Int 0) /\ @(-Int K +Int J >=Int 0) /\ Phi) .

 ceq @(I >=Int 0) /\ Phi1 ===> @(J >=Int 0) /\ Phi2
   = @(I >=Int 0) /\ @(J >=Int 0) /\ Phi1 ===> Phi2
  if (-Int I) +Int J >=Int 0 .
 ceq @(I >=Int 0) /\ @(J >=Int 0) /\ Phi1 ===> @(K >=Int 0) /\ Phi2
   = @(I >=Int 0) /\ @(J >=Int 0) /\ @(K >=Int 0) /\ Phi1 ===> Phi2
  if (-Int I) +Int (-Int J) +Int K >=Int 0 .
 ceq @(-Int J +Int I >=Int 0) /\ ~(I === J) /\ Phi1 ===> @(K >=Int 0) /\ Phi2
   = @(-Int J +Int I >=Int 0) /\ ~(I === J) /\ Phi1 ===> Phi2
  if I ==Bool J +Int K +Int 1 .
  ***eq @(-Int J +Int I >=Int 0) /\ (@(-Int I +Int J >=Int 0) /\ ~(I === J) \/ NtPhi) 
  *** = @(-Int J +Int I >=Int 0) /\ NtPhi . 

  op divisionInt : Int++ Int++ Int++ -> Int++ .
  eq I /Int J = divisionInt(I, J, 0) .
 ceq divisionInt(I, J, K) = K if (I <Int J) .
  eq divisionInt(I, J, K) = divisionInt(I -Int J, J, K +Int 1) .

  eq (bool2int(B) === 0) = ~(@ B) .
  eq (bool2int(B) === NzI) = @ B .
  eq (0 === bool2int(B)) = ~(@ B) .
  eq (NzI === bool2int(B)) = @ B .
  

  op absolute : Int++ -> Int++ .
  op fibon : Int++ -> Int++ .
  op fact : Int++ -> Int++ .
  op moduloInt : Int++ Int++ -> Int++ .

 ceq moduloInt(I , J) = I if I <Int J .
  eq moduloInt(I , J) = moduloInt((I -Int J) , J) .

  op primeInt : Int++ -> Int++ .
  op primeeInt : Int++ Int++ -> Int++ .

  eq primeInt(I)     = primeeInt(I, I -Int 1) .
 ceq primeeInt(I , J) = 1 if (J ==Bool 1) .
 ceq primeeInt(I , J) = 1 *Int primeeInt(I , J -Int 1) if moduloInt(I , J) =/=Bool 0 .
 ceq primeeInt(I , J) = 0 if moduloInt(I , J) ==Bool 0 .


 ceq absolute(I) = I if (I >=Int 0) .
 ceq absolute(I) = (-Int I) if (I <Int 0) .
 
 ceq fibon(I) = 1 if (I ==Int 1) .
 ceq fibon(I) = 1 if (I ==Int 2) .
  eq fibon(I) = fibon(I -Int 1) +Int fibon(I -Int 2) .

  eq fact(0) = 1 .
 ceq fact(I) = I *Int fact(-1 +Int I) if I >Int 0 .


 ceq maxInt(I, J) = I if (I >Int J) .
 ceq maxInt(I, J) = J if (I <=Int J) .

 ceq minInt(I, J) = J if (I >Int J) .
 ceq minInt(I, J) = I if (I <=Int J) .
endm

