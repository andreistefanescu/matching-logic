***(
    This file is part of the Matching Logic Verification Framework

    Copyright (C) 2009-2011 Grigore Rosu

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
***)


mod FORMULA-BUILTIN-MODULE is inc PL-BOOL + PL-STRING .
  sorts TruthFormula AtomFormula NtFormula Formula .
  subsort AtomFormula < NtFormula .
  subsort TruthFormula NtFormula < Formula .  

  ops TrueFormula FalseFormula : -> TruthFormula .
  op @_ : Bool -> AtomFormula [prec 0] .
  op _/\_ : NtFormula Formula -> NtFormula
  [prec 55 assoc comm id: TrueFormula] .
  op _/\_ : Formula Formula -> Formula [ditto] .
  op ~_ : AtomFormula -> AtomFormula [prec 0] .
  op ~_ : Formula -> NtFormula [ditto] .
  op _\/_ : NtFormula Formula -> NtFormula
  [prec 59 assoc comm id: FalseFormula] .
  op _\/_ : Formula Formula -> Formula [ditto] .
  op _===>_ : Formula Formula -> NtFormula [prec 61] .

  op _=fe=>_ : Formula Formula -> NtFormula .
  op _<=fe=>_ : Formula Formula -> NtFormula .

  op check-validity : Formula -> Bool .


  var Atom : AtomFormula .
  vars NtPhi NtPhi1 NtPhi2 : NtFormula .
  vars Phi Phi1 Phi2 : Formula .


  eq Phi1 =fe=> Phi2 = ~ Phi1 \/ Phi2 .
  eq Phi1 <=fe=> Phi2 = Phi1 /\ Phi2 \/ ~ Phi1 /\ ~ Phi2 .


  eq  @ true =  TrueFormula .
  eq @ false = FalseFormula .

  eq  ~ TrueFormula = FalseFormula .
  eq ~ FalseFormula =  TrueFormula .
  eq ~ ~ Phi = Phi .

  eq  TrueFormula \/  TrueFormula =  TrueFormula .
  eq FalseFormula /\ FalseFormula = FalseFormula .
  eq  TrueFormula \/ NtPhi =  TrueFormula .
  eq FalseFormula /\ NtPhi = FalseFormula .
  eq NtPhi /\ NtPhi = NtPhi .
  eq NtPhi \/ NtPhi = NtPhi .
  eq NtPhi /\ ~ NtPhi = FalseFormula .
  eq NtPhi \/ ~ NtPhi =  TrueFormula .

  eq Phi ===>  TrueFormula = TrueFormula .
  eq Phi ===> FalseFormula = ~ Phi .
  eq FalseFormula ===> Phi = TrueFormula .
  eq  TrueFormula ===> Phi = Phi .


  eq ~(NtPhi1 \/ NtPhi2) = ~ NtPhi1 /\ ~ NtPhi2 .
  eq ~(NtPhi1 /\ NtPhi2) = ~ NtPhi1 \/ ~ NtPhi2 .

  eq Atom /\ (~ Atom \/ Phi) = Atom /\ Phi .
  eq ~ Atom /\ (Atom \/ Phi) = ~ Atom /\ Phi .


  eq Atom /\ Phi1 ===> Atom /\ Phi2 \/ Phi
   = Atom /\ Phi1 ===> Phi2 \/ Phi .
  eq ~ Atom /\ Phi1 ===> ~ Atom /\ Phi2 \/ Phi
   = ~ Atom /\ Phi1 ===> Phi2 \/ Phi .
  eq ~ NtPhi /\ Phi1 ===> ~ NtPhi /\ Phi2 = ~ NtPhi /\ Phi1 ===> Phi2 .
  eq (NtPhi1 \/ NtPhi2) /\ Phi1 ===> (NtPhi1 \/ NtPhi2) /\ Phi2
   = (NtPhi1 \/ NtPhi2) /\ Phi1 ===> Phi2 .

  eq Atom /\ Phi1 ===> ~ Atom /\ Phi \/ Phi2 = Atom /\ Phi1 ===> Phi2 .
  eq ~ Atom /\ Phi1 ===> Atom /\ Phi \/ Phi2 = ~ Atom /\ Phi1 ===> Phi2 .

  eq NtPhi /\ (NtPhi1 \/ NtPhi2) ===> Phi
   = NtPhi /\ NtPhi1 \/ NtPhi /\ NtPhi2 ===> Phi [owise] .
  eq Phi ===> NtPhi /\ (NtPhi1 \/ NtPhi2)
   = Phi ===> NtPhi /\ NtPhi1 \/ NtPhi /\ NtPhi2 [owise] .


***(
  eq NtPhi1 \/ NtPhi2 ===> Phi
   = (NtPhi1 ===> Phi) /\ (NtPhi2 ===> Phi) [owise] .
 ceq Phi ===> Atom \/ NtPhi = TrueFormula
  if Phi ===> Atom ==Bool TrueFormula [owise] .
 ceq Phi ===> ~(NtPhi) \/ NtPhi2

 ceq Phi ===> (NtPhi1 /\ NtPhi2) \/ NtPhi
   = (NtPhi ===> NtPhi1) \/ (NtPhi ===> NtPhi2) [owise] .
***)


  op norm : Formula -> Formula .
  eq norm(Phi) = Phi [owise] .

 ceq Phi1 ===> Phi2 = norm(Phi1) ===> Phi2 if norm(Phi1) =/=Bool Phi1 [owise] .


  op VALID : Formula -> Bool .
  eq VALID(TrueFormula) = true .
endm


mod MATHEMATICAL-OBJECT-BUILTIN-MODULE is inc FORMULA-BUILTIN-MODULE + PL-NAT .
***(
PESort stands for bound symbolic mathematical objects
FESort stands for unbound symbolic mathematical objects
FreeSort stands for unbound symbolic mathematical objects
Sort stands for ground, non-symbolic mathematical objects
Sort++ stands for all the above
***)
  sorts PEMathObj FEMathObj FreeMathObj MathObj MathObj++ .
  sorts List{MathObj++} .
  subsort PEMathObj FEMathObj FreeMathObj MathObj < MathObj++ .
  subsort MathObj++ < List{MathObj++} .
  op skolem : Nat PEMathObj -> FreeMathObj .
  op co-skolem : Nat FreeMathObj -> FEMathObj .

  op .List{MathObj++} : -> List{MathObj++} .
  op _`,_ : List{MathObj++} List{MathObj++} -> List{MathObj++}
  [assoc id: .List{MathObj++}] .

  op errorObj : -> [MathObj++] .


  op _===_ : MathObj++ MathObj++ -> AtomFormula [comm] .
  op _===_ : List{MathObj++} List{MathObj++} -> AtomFormula [ditto] .

  vars Obj Obj11 Obj12 Obj21 Obj22 : MathObj++ .
  vars ObjList1 ObjList2 : List{MathObj++} .

  eq (Obj11, Obj12, ObjList1) === (Obj21, Obj22, ObjList2)
   = (Obj11 === Obj21) /\ (Obj12 === Obj22) /\ (ObjList1 === ObjList2) .
  eq Obj === Obj = TrueFormula .
  eq .List{MathObj++} === .List{MathObj++} = TrueFormula .


  sort SetMSet .
  subsort SetMSet < MathObj .
  op empty : -> SetMSet .
  op _U_ : SetMSet SetMSet -> SetMSet [assoc comm id: empty] .

  op isConst : MathObj++ MathObj++ -> AtomFormula .
  op proj : Nat MathObj++ -> MathObj++ .
  op in : MathObj++ MathObj++ -> AtomFormula .
  op diff : MathObj++ MathObj++ -> MathObj++ .
endm

