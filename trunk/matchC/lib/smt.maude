***(
    This file is part of the Matching Logic Verification Framework

    Copyright (C) 2009-2011 Grigore Rosu

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
***)


mod SMT-LIB is
  including FORMULA-BUILTIN-MODULE + PL-META-TERM + MAUDE-IF-THEN-ELSE .
  including PL-STRING + PL-CONVERSION .
  op toSMTLibString : Formula -> String .

  var Phi : Formula .
  eq toSMTLibString(Phi)
   = logicSMTString +String funsSMTString +String axiomsSMTString
     +String string(constsToSMTString(upTerm(Phi)))
     +String "(assert (not " +String
     if string(varsToSMTString(upTerm(Phi))) =/=Bool "" then
       "(exists (" +String string(varsToSMTString(upTerm(Phi))) +String ")"
       +String formToSMTString(upTerm(Phi)) +String ")))"
     else
       formToSMTString(upTerm(Phi)) +String "))"
     fi . *** [print "\n===check smt formula===\n" Phi "\n======\n"] .


  op axiomsSMTString : -> String .
  op logicSMTString : -> String .
  op funsSMTString : -> String .
  op formToSMTString : TermList -> String .
  op symToSMTString : Qid -> String .
  op eqToSMTString : TermList -> String .
  op assocTermToSMTString : Qid TermList -> String .
  op leqToSMTString : TermList -> String .
  op constsToSMTString : TermList -> StringSet .
  op varsToSMTString : TermList -> StringSet .

  sort StringSet NeStringSet .
  subsort String < NeStringSet < StringSet .
  op .emptyStringSet : -> StringSet .
  op _&'_ : StringSet StringSet -> StringSet [assoc comm id: .emptyStringSet] .
  op _&'_ : NeStringSet StringSet -> NeStringSet [ditto] .
  eq S:String &' S:String = S:String .
  op string : StringSet -> String .
  eq string(.emptyStringSet) = "" .
  eq string(S:String &' SS:StringSet) = S:String +String string(SS:StringSet) .

  op isLogicConst : Term -> String .
  op isLogicVar : Term -> String .

  op getSMTName : Term -> String .
  op getSMTType : Term -> String .


  var Q : Qid .
  var QC : Constant .
  var QT QT1 QT2 NT ST : Term .
  var QTList : TermList .
  var QTNeList : NeTermList .

  eq constsToSMTString((QT : QTNeList))
   = constsToSMTString(QT) &' constsToSMTString(QTNeList) .
  eq constsToSMTString(.emptyTermList) = .emptyStringSet .
  eq constsToSMTString(QC)
   = if isLogicConst(QC) then
       "(declare-fun " +String getSMTName(QC) +String " () "
       *** model all sorts as ints
       *** +String getSMTType(QC) +String ")" 
       +String "Int)"
     else
       .emptyStringSet
     fi .
  eq constsToSMTString(Q[QTList])
   = if isLogicConst(Q[QTList]) then
       "(declare-fun " +String getSMTName(Q[QTList]) +String " () "
       *** model all sorts as ints
       *** +String getSMTType(Q[QTList]) +String ")"
       +String "Int)"
     else
       constsToSMTString(QTList)
     fi .

  eq varsToSMTString((QT : QTNeList))
   = varsToSMTString(QT) &' varsToSMTString(QTNeList) .
  eq varsToSMTString(.emptyTermList) = .emptyStringSet .
  eq varsToSMTString(QC)
   = if isLogicVar(QC) then
       "(" +String getSMTName(QC) +String " "
       *** model all sorts as ints
       *** +String getSMTType(QC) +String ")"
       +String "Int)"
     else
       .emptyStringSet
     fi .
  eq varsToSMTString(Q[QTList])
   = if isLogicVar(Q[QTList]) then
       "(" +String getSMTName(Q[QTList]) +String " "
       *** model all sorts as ints
       *** +String getSMTType(Q[QTList]) +String ")"
       +String "Int)"
     else
       if notBool isLogicConst(Q[QTList]) then
         varsToSMTString(QTList)
       else
         .emptyStringSet
       fi
     fi .

  eq formToSMTString((QT : QTNeList))
   = formToSMTString(QT) +String " " +String formToSMTString(QTNeList) .
  eq formToSMTString(.emptyTermList) = "" .
  eq formToSMTString(QC)
   = if isLogicConst(QC) orBool isLogicVar(QC) then
       getSMTName(QC)
     else
       symToSMTString(QC)
     fi .
  eq formToSMTString(Q[QTList])
   = if substrString(string(Q), 0, 4) ==Bool "sNat" orBool
        isLogicConst(Q[QTList]) orBool isLogicVar(Q[QTList])
     then
       getSMTName(Q[QTList])
     else
       if Q =/=Bool '@_ then
         if Q ==Bool 'maxInt then
           "(ite (> " +String formToSMTString(QTList) +String ") "
           +String formToSMTString(QTList) +String ")"
         else if Q ==Bool 'minInt then
           "(ite (< " +String formToSMTString(QTList) +String ") "
           +String formToSMTString(QTList) +String ")"
         *** else if Q ==Bool '_===_ then
         ***   eqToSMTString(QTList)
         else if Q ==Bool '_@_ orBool Q ==Bool '_U_ then
           assocTermToSMTString(Q, QTList)
         *** else if Q ==Bool 'leq then
         ***   leqToSMTString(QTList)
         else
           "(" +String symToSMTString(Q) +String " "
           +String formToSMTString(QTList) +String ")"
         fi fi fi *** fi fi
       else
         formToSMTString(QTList)
       fi
     fi .

  eq eqToSMTString((QT1 : QT2))
   = if getSMTType(QT1) =/=Bool "MSet" then "(= " else "(eq " fi
     +String formToSMTString(QT1) +String " "
     +String formToSMTString(QT2) +String ")" .

  eq assocTermToSMTString(Q, (QT : QTNeList))
   = "(" +String symToSMTString(Q) +String " "
     +String formToSMTString(QT) +String " "
     +String assocTermToSMTString(Q, QTNeList) +String ")" .
  eq assocTermToSMTString(Q, QT) = formToSMTString(QT) .

***(
  eq leqToSMTString((QT1 : QT2))
   = "(forall ((x Int) (y Int)"
     +String "(" +String formToSMTString(QT1) +String " Int)"
     +String "(" +String formToSMTString(QT2) +String " Int)"
     +String ") (or"
     +String " (= (mset-mb-count " +String formToSMTString(QT1)
     +String " x) 0)"
     +String " (= (mset-mb-count " +String formToSMTString(QT2)
     +String " y) 0)"
     +String " (<= x y)))" .
***)

  eq isLogicConst(QC)
   = substrString(string(getType(QC)), 0, 2) ==Bool "FE" orBool
     substrString(string(getType(QC)), 0, 4) ==Bool "Free" .
  eq isLogicConst(Q[QTList])
   = substrString(string(Q), 0, 1) ==Bool "!" orBool
     substrString(string(Q), 0, 4) ==Bool "Free" orBool
     Q ==Bool 'skolem orBool Q ==Bool 'co-skolem .

  eq isLogicVar(QC) = substrString(string(getType(QC)), 0, 2) ==Bool "PE" .
  eq isLogicVar(Q[QTList]) = substrString(string(Q), 0, 1) ==Bool "?" .

  eq getSMTName(QC) = string(getName(QC)) . 
 ceq getSMTName(Q['0.Zero])
   = Int2String(downTerm(Q['0.Zero], 0))
  if substrString(string(Q), 0, 4) ==Bool "sNat" .
  eq getSMTName('id`(_`)[ST]) = downTerm(ST, "") .
  eq getSMTName('skolem[NT : QT])
   = "sk__" +String getSMTName(NT) +String "__" +String getSMTName(QT) . 
  eq getSMTName('co-skolem[NT : QT])
   = "csk__" +String getSMTName(NT) +String "__" +String getSMTName(QT) .
  eq getSMTName(Q[QT])
   = string(Q) +String "__" +String getSMTName(QT) [owise] .

 ceq getSMTType(QC)
   = substrString(string(getType(QC)), 1,
                  lengthString(string(getType(QC))) -Int 2)
  if substrString(string(getType(QC)), 0, 1) ==Bool "PE" orBool
     substrString(string(getType(QC)), 0, 1) ==Bool "FE" .
 ceq getSMTType(QC)
   = substrString(string(getType(QC)), 4,
                  lengthString(string(getType(QC))) -Int 4)
  if substrString(string(getType(QC)), 0, 4) ==Bool "Free" .
 ceq getSMTType(Q[QT]) = "Int"
  if Q ==Bool '?var orBool Q ==Bool 'FreeVar .
 ceq getSMTType(Q[QT])
   = substrString(string(Q), 1, lengthString(string(Q)) -Int 1)
  if Q =/=Bool '?var andBool substrString(string(Q), 0, 1) ==Bool "?" orBool
     substrString(string(Q), 0, 1) ==Bool "!" .
 ceq getSMTType(Q[QT])
   = substrString(string(Q), 4, lengthString(string(Q)) -Int 4)
  if Q =/=Bool 'FreeVar andBool substrString(string(Q), 0, 4) ==Bool "Free" .
 ceq getSMTType(Q[QT]) = "MSet"
  if Q ==Bool '_U_ orBool
     Q ==Bool '`{|_|`} orBool
     Q ==Bool 'tree2mset orBool
     Q ==Bool 'seq2mset .
  eq getSMTType('skolem[NT : QT]) = getSMTType(QT) . 
  eq getSMTType('co-skolem[NT : QT]) = getSMTType(QT) . 


  eq axiomsSMTString
   = "\
(assert (forall ((x Int)) (>= (len x) 0)))\
(assert (forall ((x Int)) (>= (size x) 0)))\
(assert (forall ((x Int)) (>= (height x) 0)))\
" .
***(
(assert (forall ((n Int)) (=> (> n 0) (= (fact n) (* n (fact (- n 1)))))))\
\
***)


  eq logicSMTString = "(set-logic AUFNIRA)" .

  eq funsSMTString = "\
                      (declare-fun in (Int Int) Bool)\
                      (declare-fun proj (Int Int) Int)\
\
                      (declare-fun absolute (Int) Int)\
                      (declare-fun fibon (Int) Int)\
                      (declare-fun fact (Int) Int)\
\
                      (declare-fun epsilon () Int)\
                      (declare-fun seq (Int) Int)\
                      (declare-fun append (Int Int) Int)\
                      (declare-fun rev (Int) Int)\
                      (declare-fun len (Int) Int)\
                      (declare-fun hd (Int) Int)\
                      (declare-fun filter (Int Int) Int)\
                      (declare-fun sum (Int) Int)\
\
                      (declare-fun empty () Int)\
                      (declare-fun singleton (Int) Int)\
                      (declare-fun union (Int Int) Int)\
                      (declare-fun diff (Int Int) Int)\
                      (declare-fun size (Int) Int)\
                      (declare-fun leq (Int Int) Bool)\
\
                      (declare-fun upsilon () Int)\
                      (declare-fun tree (Int Int Int) Int)\
                      (declare-fun height (Int) Int)\
                      (declare-fun mirror (Int) Int)\
\
                      (declare-fun seq2mset (Int) Int)\
                      (declare-fun tree2list (Int) Int)\
                      (declare-fun tree2mset (Int) Int)\
                      (declare-fun isSorted (Int) Bool)\
                      (declare-fun isBst (Int) Bool)\
                      (declare-fun isHeightTree (Int) Bool)\
                      (declare-fun isBalanced (Int) Bool)\
                      (declare-fun isAvl (Int) Bool)\
" .


  eq symToSMTString('TrueFormula.TruthFormula) = "true" .
  eq symToSMTString('FalseFormula.TruthFormula) = "false" .
  eq symToSMTString('_/\_) = "and" .
  eq symToSMTString('~_) = "not" .
  eq symToSMTString('_\/_) = "or" .
  eq symToSMTString('_===>_) = "=>" .
  eq symToSMTString('_===_) = "=" .

  eq symToSMTString('0.Zero) = "0" .
  eq symToSMTString('_+Int_) = "+" .
  eq symToSMTString('_-Int_) = "-" .
  eq symToSMTString('_*Int_) = "*" .
  eq symToSMTString('_/Int_) = "/" .
  eq symToSMTString('_%Int_) = "%" .
  eq symToSMTString('-Int_) = "-" .
  eq symToSMTString('_<=Int_) = "<=" .
  eq symToSMTString('_<Int_) = "<" .
  eq symToSMTString('_>=Int_) = ">=" .
  eq symToSMTString('_>Int_) = ">" .
  eq symToSMTString('-Int_) = "-" .
  
  eq symToSMTString('`[_`]) = "seq" .
  eq symToSMTString('_@_) = "append" .
  eq symToSMTString('`{|_|`}) = "singleton" .
  eq symToSMTString('_U_) = "union" .
  eq symToSMTString('_`[_`]_) = "tree" .

  eq symToSMTString(Q) = string(Q) [owise] .
endm

mod SMT-INTERFACE is including PL-STRING + SMT-LIB .
  op check-sat : String -> String
  [special (id-hook StringOpSymbol (callSolvers)
            op-hook stringSymbol (<Strings> : ~> String))] .

  var Phi : Formula .
 ceq check-validity(Phi) = S:String ==Bool "unsat"
  if S:String := check-sat(toSMTLibString(Phi))
  [print "=== sat=" S:String " ===\n" Phi "\n======\n"] .
endm

