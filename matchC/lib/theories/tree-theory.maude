***(
    This file is part of the Matching Logic Verification Framework

    Copyright (C) 2009-2011 Grigore Rosu

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
***)


mod MATHEMATICAL-TREE-BUILTIN-MODULE
  is inc MATHEMATICAL-SEQUENCE-BUILTIN-MODULE .

  sorts PETree FETree FreeTree Tree Tree++ .
  subsort PETree FETree FreeTree Tree < Tree++ .
  subsort PETree < PEMathObj .
  subsort FETree < FEMathObj .
  subsort FreeTree < FreeMathObj .
  subsort Tree < MathObj .
  subsort Tree++ < MathObj++ .

  op ?Tree : Nat -> PETree .
  op !Tree : Nat -> FETree .
  op FreeTree : Nat -> FreeTree .
  op skolem : Nat PETree -> FreeTree [ditto] .
  op co-skolem : Nat FreeTree -> FETree [ditto] .

  op upsilon : -> Tree .
  op _`[_`]_ : Tree++ MathObj++ Tree++ -> Tree++ .

  op st : Tree++ -> Tree++ .
  op height : Tree++ -> Int++ .
  op mirror : Tree++ -> Tree++ .

  var Obj Obj1 Obj2 : MathObj++ .
  var A : Seq++ .
  var T TL TL1 TL2 TR TR1 TR2 : Tree++ .


  eq TL1 [Obj1] TR1 === TL2 [Obj2] TR2
   = Obj1 === Obj2 /\ TL1 === TL2 /\ TR1 === TR2 .
  eq TL [Obj] TR === upsilon = FalseFormula .


  eq st(TL [[Obj] @ A] TR) = st(TL) [Obj] st(TR) .
  eq st(upsilon) = upsilon .

  eq height(TL [Obj] TR) = 1 +Int maxInt(height(TR), height(TL)) .
  eq height(upsilon) = 0 .

  eq mirror(TL [Obj] TR) = mirror(TR) [Obj] mirror(TL) .
  eq mirror(upsilon) = upsilon .


  eq height(st(T)) = height(T) .
  eq height(mirror(T)) = height(T) .


  eq height(T) === 0 = T === upsilon .
  eq @(-Int height(T) >=Int 0) = T === upsilon .
endm

